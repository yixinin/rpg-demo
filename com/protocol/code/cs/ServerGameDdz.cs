// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: server-game-ddz.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Protocol {

  /// <summary>Holder for reflection information generated from server-game-ddz.proto</summary>
  public static partial class ServerGameDdzReflection {

    #region Descriptor
    /// <summary>File descriptor for server-game-ddz.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ServerGameDdzReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChVzZXJ2ZXItZ2FtZS1kZHoucHJvdG8SCHByb3RvY29sGgxoZWFkZXIucHJv",
            "dG8iTAoLSm9pblJvb21SZXESDgoGcm9vbUlkGAEgASgDEgsKA3VpZBgCIAEo",
            "AxIQCghnYW1lVHlwZRgDIAEoCRIOCgZ0ZWFtSWQYBCABKAMiPQoLSm9pblRl",
            "YW1SZXESDgoGdGVhbUlkGAEgASgDEgsKA3VpZBgCIAEoAxIRCglpbnZpdGVV",
            "aWQYAyABKAMiYwoPRGVhbFBva2VyTm90aWZ5EiQKBmhlYWRlchgBIAEoCzIU",
            "LnByb3RvY29sLk5vdGlIZWFkZXISDQoFcG9rZXIYAiADKAUSDgoGYmFua2Vy",
            "GAMgASgFEgsKA2FueRgEIAEoBSI1Cg5DYWxsVmlzaWJsZVJlcRIjCgZoZWFk",
            "ZXIYASABKAsyEy5wcm90b2NvbC5SZXFIZWFkZXIiNQoOQ2FsbFZpc2libGVB",
            "Y2sSIwoGaGVhZGVyGAEgASgLMhMucHJvdG9jb2wuQWNrSGVhZGVyIlYKEUNh",
            "bGxWaXNpYmxlTm90aWZ5EiQKBmhlYWRlchgBIAEoCzIULnByb3RvY29sLk5v",
            "dGlIZWFkZXISDQoFcG9rZXIYAiADKAUSDAoEc2VhdBgDIAEoBSI4ChBDYWxs",
            "QmFua2VyTm90aWZ5EiQKBmhlYWRlchgBIAEoCzIULnByb3RvY29sLk5vdGlI",
            "ZWFkZXIiQgoNQ2FsbEJhbmtlclJlcRIjCgZoZWFkZXIYASABKAsyEy5wcm90",
            "b2NvbC5SZXFIZWFkZXISDAoEY2FsbBgCIAEoCCI0Cg1DYWxsQmFua2VyQWNr",
            "EiMKBmhlYWRlchgBIAEoCzITLnByb3RvY29sLkFja0hlYWRlciI4ChBDYWxs",
            "RHVvYmxlTm90aWZ5EiQKBmhlYWRlchgBIAEoCzIULnByb3RvY29sLk5vdGlI",
            "ZWFkZXIiRAoNQ2FsbER1b2JsZVJlcRIjCgZoZWFkZXIYASABKAsyEy5wcm90",
            "b2NvbC5SZXFIZWFkZXISDgoGcG9pbnRzGAIgASgFIjQKDUNhbGxEdW9ibGVB",
            "Y2sSIwoGaGVhZGVyGAEgASgLMhMucHJvdG9jb2wuQWNrSGVhZGVyIkQKD1Jh",
            "bmRvbUFueU5vdGlmeRIkCgZoZWFkZXIYASABKAsyFC5wcm90b2NvbC5Ob3Rp",
            "SGVhZGVyEgsKA2FueRgCIAEoBSJHChJEaXNjYXJkUG9rZXJOb3RpZnkSJAoG",
            "aGVhZGVyGAEgASgLMhQucHJvdG9jb2wuTm90aUhlYWRlchILCgNwcmUYAiAD",
            "KAUiRQoPRGlzY2FyZFBva2VyUmVxEiMKBmhlYWRlchgBIAEoCzITLnByb3Rv",
            "Y29sLlJlcUhlYWRlchINCgVwb2tlchgCIAMoBSI2Cg9EaXNjYXJkUG9rZXJB",
            "Y2sSIwoGaGVhZGVyGAEgASgLMhMucHJvdG9jb2wuQWNrSGVhZGVyIlIKDURp",
            "c2NhcmROb3RpZnkSJAoGaGVhZGVyGAEgASgLMhQucHJvdG9jb2wuTm90aUhl",
            "YWRlchIMCgRzZWF0GAIgASgFEg0KBXBva2VyGAMgAygFIkoKElVwZGF0ZVBv",
            "aW50c05vdGlmeRIkCgZoZWFkZXIYASABKAsyFC5wcm90b2NvbC5Ob3RpSGVh",
            "ZGVyEg4KBnBvaW50cxgCIAEoAyLgAQoMU2V0dGxlTm90aWZ5EiQKBmhlYWRl",
            "chgBIAEoCzIULnByb3RvY29sLk5vdGlIZWFkZXISDgoGcG9pbnRzGAIgASgD",
            "Eg0KBXRpdGxlGAMgASgJEg0KBWV4dHJhGAQgASgJEjAKBWl0ZW1zGAUgAygL",
            "MiEucHJvdG9jb2wuU2V0dGxlTm90aWZ5LlNldHRsZUl0ZW0aSgoKU2V0dGxl",
            "SXRlbRIMCgRzZWF0GAEgASgFEgwKBGNvaW4YAiABKAMSEAoIbGVmdENvaW4Y",
            "AyABKAMSDgoGcG9pbnRzGAQgASgDMpEDCg5HYW1lRGR6U2VydmljZRI2CghK",
            "b2luVGVhbRIVLnByb3RvY29sLkpvaW5UZWFtUmVxGhEucHJvdG9jb2wuQ2Fs",
            "bEFjayIAEjYKCEpvaW5Sb29tEhUucHJvdG9jb2wuSm9pblJvb21SZXEaES5w",
            "cm90b2NvbC5DYWxsQWNrIgASQwoLQ2FsbFZpc2libGUSGC5wcm90b2NvbC5D",
            "YWxsVmlzaWJsZVJlcRoYLnByb3RvY29sLkNhbGxWaXNpYmxlQWNrIgASQAoK",
            "Q2FsbEJhbmtlchIXLnByb3RvY29sLkNhbGxCYW5rZXJSZXEaFy5wcm90b2Nv",
            "bC5DYWxsQmFua2VyQWNrIgASQAoKQ2FsbER1b2JsZRIXLnByb3RvY29sLkNh",
            "bGxEdW9ibGVSZXEaFy5wcm90b2NvbC5DYWxsRHVvYmxlQWNrIgASRgoMRGlz",
            "Y2FyZFBva2VyEhkucHJvdG9jb2wuRGlzY2FyZFBva2VyUmVxGhkucHJvdG9j",
            "b2wuRGlzY2FyZFBva2VyQWNrIgBiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Protocol.HeaderReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.JoinRoomReq), global::Protocol.JoinRoomReq.Parser, new[]{ "RoomId", "Uid", "GameType", "TeamId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.JoinTeamReq), global::Protocol.JoinTeamReq.Parser, new[]{ "TeamId", "Uid", "InviteUid" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.DealPokerNotify), global::Protocol.DealPokerNotify.Parser, new[]{ "Header", "Poker", "Banker", "Any" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.CallVisibleReq), global::Protocol.CallVisibleReq.Parser, new[]{ "Header" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.CallVisibleAck), global::Protocol.CallVisibleAck.Parser, new[]{ "Header" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.CallVisibleNotify), global::Protocol.CallVisibleNotify.Parser, new[]{ "Header", "Poker", "Seat" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.CallBankerNotify), global::Protocol.CallBankerNotify.Parser, new[]{ "Header" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.CallBankerReq), global::Protocol.CallBankerReq.Parser, new[]{ "Header", "Call" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.CallBankerAck), global::Protocol.CallBankerAck.Parser, new[]{ "Header" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.CallDuobleNotify), global::Protocol.CallDuobleNotify.Parser, new[]{ "Header" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.CallDuobleReq), global::Protocol.CallDuobleReq.Parser, new[]{ "Header", "Points" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.CallDuobleAck), global::Protocol.CallDuobleAck.Parser, new[]{ "Header" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.RandomAnyNotify), global::Protocol.RandomAnyNotify.Parser, new[]{ "Header", "Any" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.DiscardPokerNotify), global::Protocol.DiscardPokerNotify.Parser, new[]{ "Header", "Pre" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.DiscardPokerReq), global::Protocol.DiscardPokerReq.Parser, new[]{ "Header", "Poker" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.DiscardPokerAck), global::Protocol.DiscardPokerAck.Parser, new[]{ "Header" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.DiscardNotify), global::Protocol.DiscardNotify.Parser, new[]{ "Header", "Seat", "Poker" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.UpdatePointsNotify), global::Protocol.UpdatePointsNotify.Parser, new[]{ "Header", "Points" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.SettleNotify), global::Protocol.SettleNotify.Parser, new[]{ "Header", "Points", "Title", "Extra", "Items" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.SettleNotify.Types.SettleItem), global::Protocol.SettleNotify.Types.SettleItem.Parser, new[]{ "Seat", "Coin", "LeftCoin", "Points" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///加入房间 如果是小队队长 则队员也会加入
  /// </summary>
  public sealed partial class JoinRoomReq : pb::IMessage<JoinRoomReq> {
    private static readonly pb::MessageParser<JoinRoomReq> _parser = new pb::MessageParser<JoinRoomReq>(() => new JoinRoomReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JoinRoomReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ServerGameDdzReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinRoomReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinRoomReq(JoinRoomReq other) : this() {
      roomId_ = other.roomId_;
      uid_ = other.uid_;
      gameType_ = other.gameType_;
      teamId_ = other.teamId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinRoomReq Clone() {
      return new JoinRoomReq(this);
    }

    /// <summary>Field number for the "roomId" field.</summary>
    public const int RoomIdFieldNumber = 1;
    private long roomId_;
    /// <summary>
    ///直接加入房间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 2;
    private long uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "gameType" field.</summary>
    public const int GameTypeFieldNumber = 3;
    private string gameType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GameType {
      get { return gameType_; }
      set {
        gameType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "teamId" field.</summary>
    public const int TeamIdFieldNumber = 4;
    private long teamId_;
    /// <summary>
    ///小队
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TeamId {
      get { return teamId_; }
      set {
        teamId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JoinRoomReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JoinRoomReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomId != other.RoomId) return false;
      if (Uid != other.Uid) return false;
      if (GameType != other.GameType) return false;
      if (TeamId != other.TeamId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomId != 0L) hash ^= RoomId.GetHashCode();
      if (Uid != 0L) hash ^= Uid.GetHashCode();
      if (GameType.Length != 0) hash ^= GameType.GetHashCode();
      if (TeamId != 0L) hash ^= TeamId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(RoomId);
      }
      if (Uid != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Uid);
      }
      if (GameType.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(GameType);
      }
      if (TeamId != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(TeamId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoomId);
      }
      if (Uid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      if (GameType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GameType);
      }
      if (TeamId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TeamId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JoinRoomReq other) {
      if (other == null) {
        return;
      }
      if (other.RoomId != 0L) {
        RoomId = other.RoomId;
      }
      if (other.Uid != 0L) {
        Uid = other.Uid;
      }
      if (other.GameType.Length != 0) {
        GameType = other.GameType;
      }
      if (other.TeamId != 0L) {
        TeamId = other.TeamId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RoomId = input.ReadInt64();
            break;
          }
          case 16: {
            Uid = input.ReadInt64();
            break;
          }
          case 26: {
            GameType = input.ReadString();
            break;
          }
          case 32: {
            TeamId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class JoinTeamReq : pb::IMessage<JoinTeamReq> {
    private static readonly pb::MessageParser<JoinTeamReq> _parser = new pb::MessageParser<JoinTeamReq>(() => new JoinTeamReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JoinTeamReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ServerGameDdzReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinTeamReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinTeamReq(JoinTeamReq other) : this() {
      teamId_ = other.teamId_;
      uid_ = other.uid_;
      inviteUid_ = other.inviteUid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinTeamReq Clone() {
      return new JoinTeamReq(this);
    }

    /// <summary>Field number for the "teamId" field.</summary>
    public const int TeamIdFieldNumber = 1;
    private long teamId_;
    /// <summary>
    ///没有id则创建小队
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TeamId {
      get { return teamId_; }
      set {
        teamId_ = value;
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 2;
    private long uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "inviteUid" field.</summary>
    public const int InviteUidFieldNumber = 3;
    private long inviteUid_;
    /// <summary>
    ///邀请人
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long InviteUid {
      get { return inviteUid_; }
      set {
        inviteUid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JoinTeamReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JoinTeamReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TeamId != other.TeamId) return false;
      if (Uid != other.Uid) return false;
      if (InviteUid != other.InviteUid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TeamId != 0L) hash ^= TeamId.GetHashCode();
      if (Uid != 0L) hash ^= Uid.GetHashCode();
      if (InviteUid != 0L) hash ^= InviteUid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TeamId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(TeamId);
      }
      if (Uid != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Uid);
      }
      if (InviteUid != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(InviteUid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TeamId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TeamId);
      }
      if (Uid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      if (InviteUid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(InviteUid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JoinTeamReq other) {
      if (other == null) {
        return;
      }
      if (other.TeamId != 0L) {
        TeamId = other.TeamId;
      }
      if (other.Uid != 0L) {
        Uid = other.Uid;
      }
      if (other.InviteUid != 0L) {
        InviteUid = other.InviteUid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TeamId = input.ReadInt64();
            break;
          }
          case 16: {
            Uid = input.ReadInt64();
            break;
          }
          case 24: {
            InviteUid = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///发牌
  /// </summary>
  public sealed partial class DealPokerNotify : pb::IMessage<DealPokerNotify> {
    private static readonly pb::MessageParser<DealPokerNotify> _parser = new pb::MessageParser<DealPokerNotify>(() => new DealPokerNotify());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DealPokerNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ServerGameDdzReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DealPokerNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DealPokerNotify(DealPokerNotify other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      poker_ = other.poker_.Clone();
      banker_ = other.banker_;
      any_ = other.any_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DealPokerNotify Clone() {
      return new DealPokerNotify(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Protocol.NotiHeader header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.NotiHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "poker" field.</summary>
    public const int PokerFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_poker_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> poker_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Poker {
      get { return poker_; }
    }

    /// <summary>Field number for the "banker" field.</summary>
    public const int BankerFieldNumber = 3;
    private int banker_;
    /// <summary>
    ///地主座次
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Banker {
      get { return banker_; }
      set {
        banker_ = value;
      }
    }

    /// <summary>Field number for the "any" field.</summary>
    public const int AnyFieldNumber = 4;
    private int any_;
    /// <summary>
    ///天癞子 （如果是天地癞子）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Any {
      get { return any_; }
      set {
        any_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DealPokerNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DealPokerNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if(!poker_.Equals(other.poker_)) return false;
      if (Banker != other.Banker) return false;
      if (Any != other.Any) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      hash ^= poker_.GetHashCode();
      if (Banker != 0) hash ^= Banker.GetHashCode();
      if (Any != 0) hash ^= Any.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      poker_.WriteTo(output, _repeated_poker_codec);
      if (Banker != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Banker);
      }
      if (Any != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Any);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      size += poker_.CalculateSize(_repeated_poker_codec);
      if (Banker != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Banker);
      }
      if (Any != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Any);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DealPokerNotify other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Protocol.NotiHeader();
        }
        Header.MergeFrom(other.Header);
      }
      poker_.Add(other.poker_);
      if (other.Banker != 0) {
        Banker = other.Banker;
      }
      if (other.Any != 0) {
        Any = other.Any;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Protocol.NotiHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18:
          case 16: {
            poker_.AddEntriesFrom(input, _repeated_poker_codec);
            break;
          }
          case 24: {
            Banker = input.ReadInt32();
            break;
          }
          case 32: {
            Any = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///明牌
  /// </summary>
  public sealed partial class CallVisibleReq : pb::IMessage<CallVisibleReq> {
    private static readonly pb::MessageParser<CallVisibleReq> _parser = new pb::MessageParser<CallVisibleReq>(() => new CallVisibleReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CallVisibleReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ServerGameDdzReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CallVisibleReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CallVisibleReq(CallVisibleReq other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CallVisibleReq Clone() {
      return new CallVisibleReq(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Protocol.ReqHeader header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.ReqHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CallVisibleReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CallVisibleReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CallVisibleReq other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Protocol.ReqHeader();
        }
        Header.MergeFrom(other.Header);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Protocol.ReqHeader();
            }
            input.ReadMessage(Header);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CallVisibleAck : pb::IMessage<CallVisibleAck> {
    private static readonly pb::MessageParser<CallVisibleAck> _parser = new pb::MessageParser<CallVisibleAck>(() => new CallVisibleAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CallVisibleAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ServerGameDdzReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CallVisibleAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CallVisibleAck(CallVisibleAck other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CallVisibleAck Clone() {
      return new CallVisibleAck(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Protocol.AckHeader header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.AckHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CallVisibleAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CallVisibleAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CallVisibleAck other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Protocol.AckHeader();
        }
        Header.MergeFrom(other.Header);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Protocol.AckHeader();
            }
            input.ReadMessage(Header);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CallVisibleNotify : pb::IMessage<CallVisibleNotify> {
    private static readonly pb::MessageParser<CallVisibleNotify> _parser = new pb::MessageParser<CallVisibleNotify>(() => new CallVisibleNotify());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CallVisibleNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ServerGameDdzReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CallVisibleNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CallVisibleNotify(CallVisibleNotify other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      poker_ = other.poker_.Clone();
      seat_ = other.seat_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CallVisibleNotify Clone() {
      return new CallVisibleNotify(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Protocol.NotiHeader header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.NotiHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "poker" field.</summary>
    public const int PokerFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_poker_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> poker_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Poker {
      get { return poker_; }
    }

    /// <summary>Field number for the "seat" field.</summary>
    public const int SeatFieldNumber = 3;
    private int seat_;
    /// <summary>
    ///座次
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Seat {
      get { return seat_; }
      set {
        seat_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CallVisibleNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CallVisibleNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if(!poker_.Equals(other.poker_)) return false;
      if (Seat != other.Seat) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      hash ^= poker_.GetHashCode();
      if (Seat != 0) hash ^= Seat.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      poker_.WriteTo(output, _repeated_poker_codec);
      if (Seat != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Seat);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      size += poker_.CalculateSize(_repeated_poker_codec);
      if (Seat != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seat);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CallVisibleNotify other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Protocol.NotiHeader();
        }
        Header.MergeFrom(other.Header);
      }
      poker_.Add(other.poker_);
      if (other.Seat != 0) {
        Seat = other.Seat;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Protocol.NotiHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18:
          case 16: {
            poker_.AddEntriesFrom(input, _repeated_poker_codec);
            break;
          }
          case 24: {
            Seat = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///提示叫地主、抢地主
  /// </summary>
  public sealed partial class CallBankerNotify : pb::IMessage<CallBankerNotify> {
    private static readonly pb::MessageParser<CallBankerNotify> _parser = new pb::MessageParser<CallBankerNotify>(() => new CallBankerNotify());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CallBankerNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ServerGameDdzReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CallBankerNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CallBankerNotify(CallBankerNotify other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CallBankerNotify Clone() {
      return new CallBankerNotify(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Protocol.NotiHeader header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.NotiHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CallBankerNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CallBankerNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CallBankerNotify other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Protocol.NotiHeader();
        }
        Header.MergeFrom(other.Header);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Protocol.NotiHeader();
            }
            input.ReadMessage(Header);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///开始叫地主
  /// </summary>
  public sealed partial class CallBankerReq : pb::IMessage<CallBankerReq> {
    private static readonly pb::MessageParser<CallBankerReq> _parser = new pb::MessageParser<CallBankerReq>(() => new CallBankerReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CallBankerReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ServerGameDdzReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CallBankerReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CallBankerReq(CallBankerReq other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      call_ = other.call_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CallBankerReq Clone() {
      return new CallBankerReq(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Protocol.ReqHeader header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.ReqHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "call" field.</summary>
    public const int CallFieldNumber = 2;
    private bool call_;
    /// <summary>
    ///是否叫地主/抢地主
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Call {
      get { return call_; }
      set {
        call_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CallBankerReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CallBankerReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (Call != other.Call) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (Call != false) hash ^= Call.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (Call != false) {
        output.WriteRawTag(16);
        output.WriteBool(Call);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (Call != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CallBankerReq other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Protocol.ReqHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.Call != false) {
        Call = other.Call;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Protocol.ReqHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 16: {
            Call = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CallBankerAck : pb::IMessage<CallBankerAck> {
    private static readonly pb::MessageParser<CallBankerAck> _parser = new pb::MessageParser<CallBankerAck>(() => new CallBankerAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CallBankerAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ServerGameDdzReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CallBankerAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CallBankerAck(CallBankerAck other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CallBankerAck Clone() {
      return new CallBankerAck(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Protocol.AckHeader header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.AckHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CallBankerAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CallBankerAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CallBankerAck other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Protocol.AckHeader();
        }
        Header.MergeFrom(other.Header);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Protocol.AckHeader();
            }
            input.ReadMessage(Header);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///加倍提示
  /// </summary>
  public sealed partial class CallDuobleNotify : pb::IMessage<CallDuobleNotify> {
    private static readonly pb::MessageParser<CallDuobleNotify> _parser = new pb::MessageParser<CallDuobleNotify>(() => new CallDuobleNotify());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CallDuobleNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ServerGameDdzReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CallDuobleNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CallDuobleNotify(CallDuobleNotify other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CallDuobleNotify Clone() {
      return new CallDuobleNotify(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Protocol.NotiHeader header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.NotiHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CallDuobleNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CallDuobleNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CallDuobleNotify other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Protocol.NotiHeader();
        }
        Header.MergeFrom(other.Header);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Protocol.NotiHeader();
            }
            input.ReadMessage(Header);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///是否加倍
  /// </summary>
  public sealed partial class CallDuobleReq : pb::IMessage<CallDuobleReq> {
    private static readonly pb::MessageParser<CallDuobleReq> _parser = new pb::MessageParser<CallDuobleReq>(() => new CallDuobleReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CallDuobleReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ServerGameDdzReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CallDuobleReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CallDuobleReq(CallDuobleReq other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      points_ = other.points_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CallDuobleReq Clone() {
      return new CallDuobleReq(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Protocol.ReqHeader header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.ReqHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "points" field.</summary>
    public const int PointsFieldNumber = 2;
    private int points_;
    /// <summary>
    ///倍数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Points {
      get { return points_; }
      set {
        points_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CallDuobleReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CallDuobleReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (Points != other.Points) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (Points != 0) hash ^= Points.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (Points != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Points);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (Points != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Points);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CallDuobleReq other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Protocol.ReqHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.Points != 0) {
        Points = other.Points;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Protocol.ReqHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 16: {
            Points = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CallDuobleAck : pb::IMessage<CallDuobleAck> {
    private static readonly pb::MessageParser<CallDuobleAck> _parser = new pb::MessageParser<CallDuobleAck>(() => new CallDuobleAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CallDuobleAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ServerGameDdzReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CallDuobleAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CallDuobleAck(CallDuobleAck other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CallDuobleAck Clone() {
      return new CallDuobleAck(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Protocol.AckHeader header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.AckHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CallDuobleAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CallDuobleAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CallDuobleAck other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Protocol.AckHeader();
        }
        Header.MergeFrom(other.Header);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Protocol.AckHeader();
            }
            input.ReadMessage(Header);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///（地）癞子 提示
  /// </summary>
  public sealed partial class RandomAnyNotify : pb::IMessage<RandomAnyNotify> {
    private static readonly pb::MessageParser<RandomAnyNotify> _parser = new pb::MessageParser<RandomAnyNotify>(() => new RandomAnyNotify());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RandomAnyNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ServerGameDdzReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RandomAnyNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RandomAnyNotify(RandomAnyNotify other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      any_ = other.any_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RandomAnyNotify Clone() {
      return new RandomAnyNotify(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Protocol.NotiHeader header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.NotiHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "any" field.</summary>
    public const int AnyFieldNumber = 2;
    private int any_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Any {
      get { return any_; }
      set {
        any_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RandomAnyNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RandomAnyNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (Any != other.Any) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (Any != 0) hash ^= Any.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (Any != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Any);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (Any != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Any);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RandomAnyNotify other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Protocol.NotiHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.Any != 0) {
        Any = other.Any;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Protocol.NotiHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 16: {
            Any = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///出牌提示
  /// </summary>
  public sealed partial class DiscardPokerNotify : pb::IMessage<DiscardPokerNotify> {
    private static readonly pb::MessageParser<DiscardPokerNotify> _parser = new pb::MessageParser<DiscardPokerNotify>(() => new DiscardPokerNotify());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DiscardPokerNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ServerGameDdzReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiscardPokerNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiscardPokerNotify(DiscardPokerNotify other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      pre_ = other.pre_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiscardPokerNotify Clone() {
      return new DiscardPokerNotify(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Protocol.NotiHeader header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.NotiHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "pre" field.</summary>
    public const int PreFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_pre_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> pre_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///上家出牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Pre {
      get { return pre_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DiscardPokerNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DiscardPokerNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if(!pre_.Equals(other.pre_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      hash ^= pre_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      pre_.WriteTo(output, _repeated_pre_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      size += pre_.CalculateSize(_repeated_pre_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DiscardPokerNotify other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Protocol.NotiHeader();
        }
        Header.MergeFrom(other.Header);
      }
      pre_.Add(other.pre_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Protocol.NotiHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18:
          case 16: {
            pre_.AddEntriesFrom(input, _repeated_pre_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///出牌
  /// </summary>
  public sealed partial class DiscardPokerReq : pb::IMessage<DiscardPokerReq> {
    private static readonly pb::MessageParser<DiscardPokerReq> _parser = new pb::MessageParser<DiscardPokerReq>(() => new DiscardPokerReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DiscardPokerReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ServerGameDdzReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiscardPokerReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiscardPokerReq(DiscardPokerReq other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      poker_ = other.poker_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiscardPokerReq Clone() {
      return new DiscardPokerReq(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Protocol.ReqHeader header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.ReqHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "poker" field.</summary>
    public const int PokerFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_poker_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> poker_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Poker {
      get { return poker_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DiscardPokerReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DiscardPokerReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if(!poker_.Equals(other.poker_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      hash ^= poker_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      poker_.WriteTo(output, _repeated_poker_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      size += poker_.CalculateSize(_repeated_poker_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DiscardPokerReq other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Protocol.ReqHeader();
        }
        Header.MergeFrom(other.Header);
      }
      poker_.Add(other.poker_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Protocol.ReqHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18:
          case 16: {
            poker_.AddEntriesFrom(input, _repeated_poker_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DiscardPokerAck : pb::IMessage<DiscardPokerAck> {
    private static readonly pb::MessageParser<DiscardPokerAck> _parser = new pb::MessageParser<DiscardPokerAck>(() => new DiscardPokerAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DiscardPokerAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ServerGameDdzReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiscardPokerAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiscardPokerAck(DiscardPokerAck other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiscardPokerAck Clone() {
      return new DiscardPokerAck(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Protocol.AckHeader header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.AckHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DiscardPokerAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DiscardPokerAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DiscardPokerAck other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Protocol.AckHeader();
        }
        Header.MergeFrom(other.Header);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Protocol.AckHeader();
            }
            input.ReadMessage(Header);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///离线、托管、超时 自动出牌
  /// </summary>
  public sealed partial class DiscardNotify : pb::IMessage<DiscardNotify> {
    private static readonly pb::MessageParser<DiscardNotify> _parser = new pb::MessageParser<DiscardNotify>(() => new DiscardNotify());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DiscardNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ServerGameDdzReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiscardNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiscardNotify(DiscardNotify other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      seat_ = other.seat_;
      poker_ = other.poker_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiscardNotify Clone() {
      return new DiscardNotify(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Protocol.NotiHeader header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.NotiHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "seat" field.</summary>
    public const int SeatFieldNumber = 2;
    private int seat_;
    /// <summary>
    ///座位号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Seat {
      get { return seat_; }
      set {
        seat_ = value;
      }
    }

    /// <summary>Field number for the "poker" field.</summary>
    public const int PokerFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_poker_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> poker_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///出牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Poker {
      get { return poker_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DiscardNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DiscardNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (Seat != other.Seat) return false;
      if(!poker_.Equals(other.poker_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (Seat != 0) hash ^= Seat.GetHashCode();
      hash ^= poker_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (Seat != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Seat);
      }
      poker_.WriteTo(output, _repeated_poker_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (Seat != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seat);
      }
      size += poker_.CalculateSize(_repeated_poker_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DiscardNotify other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Protocol.NotiHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.Seat != 0) {
        Seat = other.Seat;
      }
      poker_.Add(other.poker_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Protocol.NotiHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 16: {
            Seat = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            poker_.AddEntriesFrom(input, _repeated_poker_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///倍数更新 （炸弹）
  /// </summary>
  public sealed partial class UpdatePointsNotify : pb::IMessage<UpdatePointsNotify> {
    private static readonly pb::MessageParser<UpdatePointsNotify> _parser = new pb::MessageParser<UpdatePointsNotify>(() => new UpdatePointsNotify());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdatePointsNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ServerGameDdzReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdatePointsNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdatePointsNotify(UpdatePointsNotify other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      points_ = other.points_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdatePointsNotify Clone() {
      return new UpdatePointsNotify(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Protocol.NotiHeader header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.NotiHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "points" field.</summary>
    public const int PointsFieldNumber = 2;
    private long points_;
    /// <summary>
    ///总倍数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Points {
      get { return points_; }
      set {
        points_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdatePointsNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdatePointsNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (Points != other.Points) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (Points != 0L) hash ^= Points.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (Points != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Points);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (Points != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Points);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdatePointsNotify other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Protocol.NotiHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.Points != 0L) {
        Points = other.Points;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Protocol.NotiHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 16: {
            Points = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///打完收工
  /// </summary>
  public sealed partial class SettleNotify : pb::IMessage<SettleNotify> {
    private static readonly pb::MessageParser<SettleNotify> _parser = new pb::MessageParser<SettleNotify>(() => new SettleNotify());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SettleNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ServerGameDdzReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SettleNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SettleNotify(SettleNotify other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      points_ = other.points_;
      title_ = other.title_;
      extra_ = other.extra_;
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SettleNotify Clone() {
      return new SettleNotify(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Protocol.NotiHeader header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.NotiHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "points" field.</summary>
    public const int PointsFieldNumber = 2;
    private long points_;
    /// <summary>
    ///总倍数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Points {
      get { return points_; }
      set {
        points_ = value;
      }
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 3;
    private string title_ = "";
    /// <summary>
    /// 春天等
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "extra" field.</summary>
    public const int ExtraFieldNumber = 4;
    private string extra_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Extra {
      get { return extra_; }
      set {
        extra_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Protocol.SettleNotify.Types.SettleItem> _repeated_items_codec
        = pb::FieldCodec.ForMessage(42, global::Protocol.SettleNotify.Types.SettleItem.Parser);
    private readonly pbc::RepeatedField<global::Protocol.SettleNotify.Types.SettleItem> items_ = new pbc::RepeatedField<global::Protocol.SettleNotify.Types.SettleItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.SettleNotify.Types.SettleItem> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SettleNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SettleNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (Points != other.Points) return false;
      if (Title != other.Title) return false;
      if (Extra != other.Extra) return false;
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (Points != 0L) hash ^= Points.GetHashCode();
      if (Title.Length != 0) hash ^= Title.GetHashCode();
      if (Extra.Length != 0) hash ^= Extra.GetHashCode();
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (Points != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Points);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Title);
      }
      if (Extra.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Extra);
      }
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (Points != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Points);
      }
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (Extra.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Extra);
      }
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SettleNotify other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Protocol.NotiHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.Points != 0L) {
        Points = other.Points;
      }
      if (other.Title.Length != 0) {
        Title = other.Title;
      }
      if (other.Extra.Length != 0) {
        Extra = other.Extra;
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Protocol.NotiHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 16: {
            Points = input.ReadInt64();
            break;
          }
          case 26: {
            Title = input.ReadString();
            break;
          }
          case 34: {
            Extra = input.ReadString();
            break;
          }
          case 42: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SettleNotify message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class SettleItem : pb::IMessage<SettleItem> {
        private static readonly pb::MessageParser<SettleItem> _parser = new pb::MessageParser<SettleItem>(() => new SettleItem());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SettleItem> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Protocol.SettleNotify.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SettleItem() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SettleItem(SettleItem other) : this() {
          seat_ = other.seat_;
          coin_ = other.coin_;
          leftCoin_ = other.leftCoin_;
          points_ = other.points_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SettleItem Clone() {
          return new SettleItem(this);
        }

        /// <summary>Field number for the "seat" field.</summary>
        public const int SeatFieldNumber = 1;
        private int seat_;
        /// <summary>
        ///座次
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Seat {
          get { return seat_; }
          set {
            seat_ = value;
          }
        }

        /// <summary>Field number for the "coin" field.</summary>
        public const int CoinFieldNumber = 2;
        private long coin_;
        /// <summary>
        ///金币变化
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Coin {
          get { return coin_; }
          set {
            coin_ = value;
          }
        }

        /// <summary>Field number for the "leftCoin" field.</summary>
        public const int LeftCoinFieldNumber = 3;
        private long leftCoin_;
        /// <summary>
        ///剩余
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long LeftCoin {
          get { return leftCoin_; }
          set {
            leftCoin_ = value;
          }
        }

        /// <summary>Field number for the "points" field.</summary>
        public const int PointsFieldNumber = 4;
        private long points_;
        /// <summary>
        ///倍数
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Points {
          get { return points_; }
          set {
            points_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as SettleItem);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SettleItem other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Seat != other.Seat) return false;
          if (Coin != other.Coin) return false;
          if (LeftCoin != other.LeftCoin) return false;
          if (Points != other.Points) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Seat != 0) hash ^= Seat.GetHashCode();
          if (Coin != 0L) hash ^= Coin.GetHashCode();
          if (LeftCoin != 0L) hash ^= LeftCoin.GetHashCode();
          if (Points != 0L) hash ^= Points.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Seat != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Seat);
          }
          if (Coin != 0L) {
            output.WriteRawTag(16);
            output.WriteInt64(Coin);
          }
          if (LeftCoin != 0L) {
            output.WriteRawTag(24);
            output.WriteInt64(LeftCoin);
          }
          if (Points != 0L) {
            output.WriteRawTag(32);
            output.WriteInt64(Points);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Seat != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seat);
          }
          if (Coin != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Coin);
          }
          if (LeftCoin != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(LeftCoin);
          }
          if (Points != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Points);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SettleItem other) {
          if (other == null) {
            return;
          }
          if (other.Seat != 0) {
            Seat = other.Seat;
          }
          if (other.Coin != 0L) {
            Coin = other.Coin;
          }
          if (other.LeftCoin != 0L) {
            LeftCoin = other.LeftCoin;
          }
          if (other.Points != 0L) {
            Points = other.Points;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Seat = input.ReadInt32();
                break;
              }
              case 16: {
                Coin = input.ReadInt64();
                break;
              }
              case 24: {
                LeftCoin = input.ReadInt64();
                break;
              }
              case 32: {
                Points = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
