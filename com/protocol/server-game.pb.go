// Code generated by protoc-gen-go. DO NOT EDIT.
// source: server-game.proto

package protocol

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Player struct {
	PlayerId             int64    `protobuf:"varint,1,opt,name=playerId,proto3" json:"playerId,omitempty"`
	NickName             string   `protobuf:"bytes,2,opt,name=nickName,proto3" json:"nickName,omitempty"`
	Avatar               string   `protobuf:"bytes,3,opt,name=avatar,proto3" json:"avatar,omitempty"`
	Coin                 int64    `protobuf:"varint,4,opt,name=coin,proto3" json:"coin,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Player) Reset()         { *m = Player{} }
func (m *Player) String() string { return proto.CompactTextString(m) }
func (*Player) ProtoMessage()    {}
func (*Player) Descriptor() ([]byte, []int) {
	return fileDescriptor_84cbf3ce83a4d353, []int{0}
}

func (m *Player) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Player.Unmarshal(m, b)
}
func (m *Player) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Player.Marshal(b, m, deterministic)
}
func (m *Player) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Player.Merge(m, src)
}
func (m *Player) XXX_Size() int {
	return xxx_messageInfo_Player.Size(m)
}
func (m *Player) XXX_DiscardUnknown() {
	xxx_messageInfo_Player.DiscardUnknown(m)
}

var xxx_messageInfo_Player proto.InternalMessageInfo

func (m *Player) GetPlayerId() int64 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

func (m *Player) GetNickName() string {
	if m != nil {
		return m.NickName
	}
	return ""
}

func (m *Player) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

func (m *Player) GetCoin() int64 {
	if m != nil {
		return m.Coin
	}
	return 0
}

type StartGameReq struct {
	RoomId               int64     `protobuf:"varint,1,opt,name=roomId,proto3" json:"roomId,omitempty"`
	Players              []*Player `protobuf:"bytes,2,rep,name=players,proto3" json:"players,omitempty"`
	RoundNo              string    `protobuf:"bytes,3,opt,name=roundNo,proto3" json:"roundNo,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *StartGameReq) Reset()         { *m = StartGameReq{} }
func (m *StartGameReq) String() string { return proto.CompactTextString(m) }
func (*StartGameReq) ProtoMessage()    {}
func (*StartGameReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_84cbf3ce83a4d353, []int{1}
}

func (m *StartGameReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StartGameReq.Unmarshal(m, b)
}
func (m *StartGameReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StartGameReq.Marshal(b, m, deterministic)
}
func (m *StartGameReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartGameReq.Merge(m, src)
}
func (m *StartGameReq) XXX_Size() int {
	return xxx_messageInfo_StartGameReq.Size(m)
}
func (m *StartGameReq) XXX_DiscardUnknown() {
	xxx_messageInfo_StartGameReq.DiscardUnknown(m)
}

var xxx_messageInfo_StartGameReq proto.InternalMessageInfo

func (m *StartGameReq) GetRoomId() int64 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *StartGameReq) GetPlayers() []*Player {
	if m != nil {
		return m.Players
	}
	return nil
}

func (m *StartGameReq) GetRoundNo() string {
	if m != nil {
		return m.RoundNo
	}
	return ""
}

type CloseGameReq struct {
	RoomId               int64    `protobuf:"varint,1,opt,name=roomId,proto3" json:"roomId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CloseGameReq) Reset()         { *m = CloseGameReq{} }
func (m *CloseGameReq) String() string { return proto.CompactTextString(m) }
func (*CloseGameReq) ProtoMessage()    {}
func (*CloseGameReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_84cbf3ce83a4d353, []int{2}
}

func (m *CloseGameReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CloseGameReq.Unmarshal(m, b)
}
func (m *CloseGameReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CloseGameReq.Marshal(b, m, deterministic)
}
func (m *CloseGameReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloseGameReq.Merge(m, src)
}
func (m *CloseGameReq) XXX_Size() int {
	return xxx_messageInfo_CloseGameReq.Size(m)
}
func (m *CloseGameReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CloseGameReq.DiscardUnknown(m)
}

var xxx_messageInfo_CloseGameReq proto.InternalMessageInfo

func (m *CloseGameReq) GetRoomId() int64 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

type AddCoinReq struct {
	PlayerId             int64    `protobuf:"varint,1,opt,name=playerId,proto3" json:"playerId,omitempty"`
	Coin                 int64    `protobuf:"varint,2,opt,name=coin,proto3" json:"coin,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddCoinReq) Reset()         { *m = AddCoinReq{} }
func (m *AddCoinReq) String() string { return proto.CompactTextString(m) }
func (*AddCoinReq) ProtoMessage()    {}
func (*AddCoinReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_84cbf3ce83a4d353, []int{3}
}

func (m *AddCoinReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddCoinReq.Unmarshal(m, b)
}
func (m *AddCoinReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddCoinReq.Marshal(b, m, deterministic)
}
func (m *AddCoinReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddCoinReq.Merge(m, src)
}
func (m *AddCoinReq) XXX_Size() int {
	return xxx_messageInfo_AddCoinReq.Size(m)
}
func (m *AddCoinReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AddCoinReq.DiscardUnknown(m)
}

var xxx_messageInfo_AddCoinReq proto.InternalMessageInfo

func (m *AddCoinReq) GetPlayerId() int64 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

func (m *AddCoinReq) GetCoin() int64 {
	if m != nil {
		return m.Coin
	}
	return 0
}

type AddPlayerReq struct {
	Player               *Player  `protobuf:"bytes,1,opt,name=player,proto3" json:"player,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddPlayerReq) Reset()         { *m = AddPlayerReq{} }
func (m *AddPlayerReq) String() string { return proto.CompactTextString(m) }
func (*AddPlayerReq) ProtoMessage()    {}
func (*AddPlayerReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_84cbf3ce83a4d353, []int{4}
}

func (m *AddPlayerReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddPlayerReq.Unmarshal(m, b)
}
func (m *AddPlayerReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddPlayerReq.Marshal(b, m, deterministic)
}
func (m *AddPlayerReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddPlayerReq.Merge(m, src)
}
func (m *AddPlayerReq) XXX_Size() int {
	return xxx_messageInfo_AddPlayerReq.Size(m)
}
func (m *AddPlayerReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AddPlayerReq.DiscardUnknown(m)
}

var xxx_messageInfo_AddPlayerReq proto.InternalMessageInfo

func (m *AddPlayerReq) GetPlayer() *Player {
	if m != nil {
		return m.Player
	}
	return nil
}

func init() {
	proto.RegisterType((*Player)(nil), "protocol.Player")
	proto.RegisterType((*StartGameReq)(nil), "protocol.StartGameReq")
	proto.RegisterType((*CloseGameReq)(nil), "protocol.CloseGameReq")
	proto.RegisterType((*AddCoinReq)(nil), "protocol.AddCoinReq")
	proto.RegisterType((*AddPlayerReq)(nil), "protocol.AddPlayerReq")
}

func init() { proto.RegisterFile("server-game.proto", fileDescriptor_84cbf3ce83a4d353) }

var fileDescriptor_84cbf3ce83a4d353 = []byte{
	// 347 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x90, 0x4f, 0x6b, 0xf2, 0x40,
	0x10, 0xc6, 0x5f, 0xa3, 0x44, 0x1d, 0x73, 0x78, 0x1d, 0x5a, 0x09, 0x39, 0x49, 0x0e, 0x25, 0x14,
	0xea, 0xc1, 0x96, 0xe2, 0xa1, 0x17, 0xf1, 0x50, 0x4a, 0x41, 0x4a, 0xa4, 0x1f, 0x60, 0x9b, 0x1d,
	0xda, 0xe0, 0x26, 0xab, 0x9b, 0x28, 0xf8, 0x91, 0xfa, 0x2d, 0x4b, 0x36, 0xff, 0xf6, 0xa0, 0xed,
	0x29, 0xfb, 0xcc, 0xcc, 0x93, 0x79, 0xe6, 0x07, 0xe3, 0x8c, 0xd4, 0x91, 0xd4, 0xdd, 0x27, 0x4b,
	0x68, 0xb6, 0x53, 0x32, 0x97, 0x38, 0xd0, 0x9f, 0x48, 0x0a, 0x6f, 0x74, 0x48, 0xe3, 0xfc, 0x54,
	0x96, 0x3d, 0xe7, 0x8b, 0x18, 0x27, 0x55, 0x2a, 0x5f, 0x80, 0xfd, 0x26, 0xd8, 0x89, 0x14, 0x7a,
	0x30, 0xd8, 0xe9, 0xd7, 0x0b, 0x77, 0x3b, 0xd3, 0x4e, 0xd0, 0x0d, 0x1b, 0x5d, 0xf4, 0xd2, 0x38,
	0xda, 0xae, 0x59, 0x42, 0xae, 0x35, 0xed, 0x04, 0xc3, 0xb0, 0xd1, 0x38, 0x01, 0x9b, 0x1d, 0x59,
	0xce, 0x94, 0xdb, 0xd5, 0x9d, 0x4a, 0x21, 0x42, 0x2f, 0x92, 0x71, 0xea, 0xf6, 0xf4, 0xbf, 0xf4,
	0xdb, 0x17, 0xe0, 0x6c, 0x72, 0xa6, 0xf2, 0x67, 0x96, 0x50, 0x48, 0xfb, 0xc2, 0xab, 0xa4, 0x4c,
	0x9a, 0x8d, 0x95, 0xc2, 0x5b, 0xe8, 0x97, 0xbb, 0x33, 0xd7, 0x9a, 0x76, 0x83, 0xd1, 0xfc, 0xff,
	0xac, 0x3e, 0x66, 0x56, 0xc6, 0x0d, 0xeb, 0x01, 0x74, 0xa1, 0xaf, 0xe4, 0x21, 0xe5, 0x6b, 0x59,
	0x05, 0xa8, 0xa5, 0x7f, 0x03, 0xce, 0x4a, 0xc8, 0x8c, 0xfe, 0xd8, 0xe6, 0x3f, 0x01, 0x2c, 0x39,
	0x5f, 0xc9, 0x38, 0x2d, 0xa6, 0x7e, 0xe3, 0x50, 0xdf, 0x64, 0x19, 0x37, 0x2d, 0xc0, 0x59, 0x72,
	0x5e, 0xa5, 0xa2, 0x3d, 0x06, 0x60, 0x97, 0xf3, 0xda, 0x7d, 0x2e, 0x7a, 0xd5, 0x9f, 0x7f, 0x5b,
	0x30, 0x2a, 0xb2, 0x6d, 0x48, 0x1d, 0xe3, 0x88, 0xf0, 0x11, 0x06, 0xaf, 0x71, 0xb4, 0x7d, 0xcf,
	0x48, 0xe1, 0x75, 0xeb, 0xaa, 0x6b, 0x21, 0xed, 0xbd, 0x71, 0x5b, 0x5e, 0x31, 0x21, 0x96, 0xd1,
	0xd6, 0xff, 0x87, 0x0b, 0x18, 0x36, 0x54, 0x71, 0xd2, 0x4e, 0x98, 0xa8, 0x2f, 0x3a, 0x1b, 0x42,
	0xa6, 0xd3, 0xc4, 0x76, 0xde, 0xf9, 0x00, 0xfd, 0x8a, 0x19, 0x5e, 0xb5, 0xfd, 0x16, 0xe3, 0xc5,
	0x7d, 0x0d, 0x2b, 0x73, 0x9f, 0x09, 0xf0, 0xac, 0xf3, 0xc3, 0xd6, 0xb5, 0xfb, 0x9f, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xab, 0xea, 0x35, 0xea, 0xe8, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GameServiceClient is the client API for GameService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GameServiceClient interface {
	KickUser(ctx context.Context, in *KickUserReq, opts ...grpc.CallOption) (*CallAck, error)
	StartGame(ctx context.Context, in *StartGameReq, opts ...grpc.CallOption) (*CallAck, error)
	//强制中断游戏
	CloseGame(ctx context.Context, in *CloseGameReq, opts ...grpc.CallOption) (*CallAck, error)
	//上/下分
	AddCoin(ctx context.Context, in *AddCoinReq, opts ...grpc.CallOption) (*CallAck, error)
	//中途加入游戏/ 断线重连
	AddPlayer(ctx context.Context, in *AddPlayerReq, opts ...grpc.CallOption) (*CallAck, error)
}

type gameServiceClient struct {
	cc *grpc.ClientConn
}

func NewGameServiceClient(cc *grpc.ClientConn) GameServiceClient {
	return &gameServiceClient{cc}
}

func (c *gameServiceClient) KickUser(ctx context.Context, in *KickUserReq, opts ...grpc.CallOption) (*CallAck, error) {
	out := new(CallAck)
	err := c.cc.Invoke(ctx, "/protocol.GameService/KickUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) StartGame(ctx context.Context, in *StartGameReq, opts ...grpc.CallOption) (*CallAck, error) {
	out := new(CallAck)
	err := c.cc.Invoke(ctx, "/protocol.GameService/StartGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) CloseGame(ctx context.Context, in *CloseGameReq, opts ...grpc.CallOption) (*CallAck, error) {
	out := new(CallAck)
	err := c.cc.Invoke(ctx, "/protocol.GameService/CloseGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) AddCoin(ctx context.Context, in *AddCoinReq, opts ...grpc.CallOption) (*CallAck, error) {
	out := new(CallAck)
	err := c.cc.Invoke(ctx, "/protocol.GameService/AddCoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) AddPlayer(ctx context.Context, in *AddPlayerReq, opts ...grpc.CallOption) (*CallAck, error) {
	out := new(CallAck)
	err := c.cc.Invoke(ctx, "/protocol.GameService/AddPlayer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameServiceServer is the server API for GameService service.
type GameServiceServer interface {
	KickUser(context.Context, *KickUserReq) (*CallAck, error)
	StartGame(context.Context, *StartGameReq) (*CallAck, error)
	//强制中断游戏
	CloseGame(context.Context, *CloseGameReq) (*CallAck, error)
	//上/下分
	AddCoin(context.Context, *AddCoinReq) (*CallAck, error)
	//中途加入游戏/ 断线重连
	AddPlayer(context.Context, *AddPlayerReq) (*CallAck, error)
}

// UnimplementedGameServiceServer can be embedded to have forward compatible implementations.
type UnimplementedGameServiceServer struct {
}

func (*UnimplementedGameServiceServer) KickUser(ctx context.Context, req *KickUserReq) (*CallAck, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KickUser not implemented")
}
func (*UnimplementedGameServiceServer) StartGame(ctx context.Context, req *StartGameReq) (*CallAck, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartGame not implemented")
}
func (*UnimplementedGameServiceServer) CloseGame(ctx context.Context, req *CloseGameReq) (*CallAck, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseGame not implemented")
}
func (*UnimplementedGameServiceServer) AddCoin(ctx context.Context, req *AddCoinReq) (*CallAck, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCoin not implemented")
}
func (*UnimplementedGameServiceServer) AddPlayer(ctx context.Context, req *AddPlayerReq) (*CallAck, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPlayer not implemented")
}

func RegisterGameServiceServer(s *grpc.Server, srv GameServiceServer) {
	s.RegisterService(&_GameService_serviceDesc, srv)
}

func _GameService_KickUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KickUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).KickUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.GameService/KickUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).KickUser(ctx, req.(*KickUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_StartGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartGameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).StartGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.GameService/StartGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).StartGame(ctx, req.(*StartGameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_CloseGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseGameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).CloseGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.GameService/CloseGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).CloseGame(ctx, req.(*CloseGameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_AddCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCoinReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).AddCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.GameService/AddCoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).AddCoin(ctx, req.(*AddCoinReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_AddPlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPlayerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).AddPlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.GameService/AddPlayer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).AddPlayer(ctx, req.(*AddPlayerReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _GameService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.GameService",
	HandlerType: (*GameServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "KickUser",
			Handler:    _GameService_KickUser_Handler,
		},
		{
			MethodName: "StartGame",
			Handler:    _GameService_StartGame_Handler,
		},
		{
			MethodName: "CloseGame",
			Handler:    _GameService_CloseGame_Handler,
		},
		{
			MethodName: "AddCoin",
			Handler:    _GameService_AddCoin_Handler,
		},
		{
			MethodName: "AddPlayer",
			Handler:    _GameService_AddPlayer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server-game.proto",
}
